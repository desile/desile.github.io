<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on Не очень личный блог</title>
    <link>https://desile.github.io/tags/c/index.xml</link>
    <description>Recent content in C on Не очень личный блог</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru</language>
    <atom:link href="https://desile.github.io/tags/c/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Метод k-средних для обработки изображений на CUDA</title>
      <link>https://desile.github.io/2017/04/%D0%BC%D0%B5%D1%82%D0%BE%D0%B4-k-%D1%81%D1%80%D0%B5%D0%B4%D0%BD%D0%B8%D1%85-%D0%B4%D0%BB%D1%8F-%D0%BE%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B8-%D0%B8%D0%B7%D0%BE%D0%B1%D1%80%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D0%B9-%D0%BD%D0%B0-cuda/</link>
      <pubDate>Thu, 20 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://desile.github.io/2017/04/%D0%BC%D0%B5%D1%82%D0%BE%D0%B4-k-%D1%81%D1%80%D0%B5%D0%B4%D0%BD%D0%B8%D1%85-%D0%B4%D0%BB%D1%8F-%D0%BE%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B8-%D0%B8%D0%B7%D0%BE%D0%B1%D1%80%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D0%B9-%D0%BD%D0%B0-cuda/</guid>
      <description>&lt;p&gt;Метод k-средних - один из самых популярных и простых методов кластеризации. Метод заключается в минимизации суммарного квадратичного отклонения точек кластеров от центров этих кластеров.&lt;/p&gt;

&lt;p&gt;
$$
V = \sum_{i=1}^{k} \sum_{x_j \in S_i} (x_j - \mu_i)^2
$$
&lt;/p&gt;

&lt;p&gt;где \(k\)  — число кластеров, \(S_i\)  — полученные кластеры, \(i=1,2,&amp;hellip;,k\)  и \(\mu_i\)  — центры масс векторов \(x_j \in S_i\) .&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Работу этого метода замечательно демонстрирует эта картинка:
&lt;img src=&#34;https://desile.github.io/images/kmeans-cude/kmeans.png&#34; alt=&#34;Kmeans algorithm&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Определяется количество кластеров и выбираются случайные начальные позиции центров кластеров.&lt;/li&gt;
&lt;li&gt;Для каждой точки определяется ближайшая позиция центра кластера.&lt;/li&gt;
&lt;li&gt;Вычисляются центроиды - центры тяжести кластеров.&lt;/li&gt;
&lt;li&gt;Центры кластеров перемещаются к центроидам.&lt;/li&gt;
&lt;li&gt;Возвращаемся к п. 2&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;В случае задачи обработки изображения пространством будет трехмерное пространство цветов - RGB. Поэтому точками кластеров будут являться цвета - точки пространства RGB, например (196,0,171) &lt;span style=&#34;color:#C400AB&#34;&gt;пурпурный цвет&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Такая задача является одной из наглядных демонстраций метода k-средних, а так же очень хорошо распараллеливается, поэтому можно решить эту задачу средствами CUDA.&lt;/p&gt;

&lt;p&gt;Для начала нужно представить изображение в виде следующей бинарной структуры:
&lt;img src=&#34;https://desile.github.io/images/kmeans-cude/binary-pic.png&#34; alt=&#34;Binary Pic Presentation&#34; /&gt;
Это можно сделать готовой утилитой или добавить конвертацию непосредственно в программу кластеризации.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Алгоритм решения примерно следующий:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Доступ к константной памяти достаточно быстрый, за счет использования
кэша, но большими объемами она не располагает, поэтому в ней имеет
смысл хранить лишь небольшое количество часто используемых данных. Мы
имеем возможность записывать в нее данные с хоста, но при этом в
пределах GPU, как и следует из названия, данные мы изменять не можем,
и они доступны нам только для чтения.&lt;/p&gt;

&lt;p&gt;Таким образом, константная память хорошо подходит для использования в
алгоритме kMeans - для хранения центров кластеров, так как обращений к
ним происходит достаточно много, а изменяем мы их уже на CPU. Поэтому
копируем значения центров кластеров в константную память.&lt;/p&gt;

&lt;p&gt;В ядре параллельно находим ближайшие кластеры для каждого пикселя.
Если для пикселя изменился ближайший кластер, то ставим на пиксель
метку о том, что необходимо продолжать итеративный процесс.&lt;/p&gt;

&lt;p&gt;Далее на CPU обходим все пиксели, проверяя наличие меток, и вычисляя
новые центры кластеров. Так как для каждого пикселя уже известен номер
кластера, то находим усредненное значение всего кластера – новый
центр. Если при обходе нам не встретилась ни одна метка, то это
значит, что центры кластеров стабилизировались и можно завершать
процесс.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;У меня завалялась картинка одной модели SuicideGirls ( ͡° ͜ʖ ͡°) Возьмем ее:

 
  
  
  
  
    
      
    
  
    
      
    
  
    
  

 
  
  
  
  
    
  
    
      
    
  

&lt;div class=&#34;figure fig-100&#34; &gt;
  
    &lt;a class=&#34;fancybox&#34; href=&#34;https://desile.github.io/images/kmeans-cude/suicide.jpg&#34; title=&#34;Оригинал изображения&#34; data-fancybox-group=&#34;&#34;&gt;
  
    &lt;img class=&#34;fig-img&#34; src=&#34;https://desile.github.io/images/kmeans-cude/suicide.jpg&#34;  alt=&#34;Оригинал изображения&#34;&gt;
  
    &lt;/a&gt;
  
   
    &lt;span class=&#34;caption&#34;&gt;Оригинал изображения&lt;/span&gt;
  
&lt;/div&gt;

  &lt;div style=&#34;clear:both;&#34;&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Попробуем задать два кластера и обработать картинку. Два кластера - означают два усредненных цвета. Пиксели картинки прибиваются к одному из кластеров и перекрашиваются в усредненный цвет. Для двух кластеров алгоритм очень точно выделил кожу модели:

 
  
  
  
  
    
      
    
  
    
      
    
  
    
  

 
  
  
  
  
    
  
    
      
    
  

&lt;div class=&#34;figure fig-100&#34; &gt;
  
    &lt;a class=&#34;fancybox&#34; href=&#34;https://desile.github.io/images/kmeans-cude/suic2.png&#34; title=&#34;2 кластера&#34; data-fancybox-group=&#34;&#34;&gt;
  
    &lt;img class=&#34;fig-img&#34; src=&#34;https://desile.github.io/images/kmeans-cude/suic2.png&#34;  alt=&#34;2 кластера&#34;&gt;
  
    &lt;/a&gt;
  
   
    &lt;span class=&#34;caption&#34;&gt;2 кластера&lt;/span&gt;
  
&lt;/div&gt;

  &lt;div style=&#34;clear:both;&#34;&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Пять, десять и тридцать кластеров соответственно:


 
  
  
  
  
    
  
    
      
    
  

&lt;div class=&#34;figure fig-33&#34; &gt;
  
    &lt;a class=&#34;fancybox&#34; href=&#34;https://desile.github.io/images/kmeans-cude/suic5.png&#34; title=&#34;5 кластеров&#34; data-fancybox-group=&#34;&#34;&gt;
  
    &lt;img class=&#34;fig-img&#34; src=&#34;https://desile.github.io/images/kmeans-cude/suic5.png&#34;  alt=&#34;5 кластеров&#34;&gt;
  
    &lt;/a&gt;
  
   
    &lt;span class=&#34;caption&#34;&gt;5 кластеров&lt;/span&gt;
  
&lt;/div&gt;



 
  
  
  
  
    
  
    
      
    
  

&lt;div class=&#34;figure fig-33&#34; &gt;
  
    &lt;a class=&#34;fancybox&#34; href=&#34;https://desile.github.io/images/kmeans-cude/suic10.png&#34; title=&#34;10 кластеров&#34; data-fancybox-group=&#34;&#34;&gt;
  
    &lt;img class=&#34;fig-img&#34; src=&#34;https://desile.github.io/images/kmeans-cude/suic10.png&#34;  alt=&#34;10 кластеров&#34;&gt;
  
    &lt;/a&gt;
  
   
    &lt;span class=&#34;caption&#34;&gt;10 кластеров&lt;/span&gt;
  
&lt;/div&gt;



 
  
  
  
  
    
  
    
      
    
  

&lt;div class=&#34;figure fig-33&#34; &gt;
  
    &lt;a class=&#34;fancybox&#34; href=&#34;https://desile.github.io/images/kmeans-cude/suic30.png&#34; title=&#34;30 кластеров&#34; data-fancybox-group=&#34;&#34;&gt;
  
    &lt;img class=&#34;fig-img&#34; src=&#34;https://desile.github.io/images/kmeans-cude/suic30.png&#34;  alt=&#34;30 кластеров&#34;&gt;
  
    &lt;/a&gt;
  
   
    &lt;span class=&#34;caption&#34;&gt;30 кластеров&lt;/span&gt;
  
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Код решения на C\CUDA&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;quot;cuda_runtime.h&amp;quot;
#include &amp;quot;device_launch_parameters.h&amp;quot;

#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;math.h&amp;gt;

#define BLOCK_SIZE 1024

#define MAX_GRID_SIZE 40000
#define SIZE_FILE_NAME 255
#define MAX_CLUSTERS 32

typedef unsigned char uchar;

__constant__ double3 centersDevice[MAX_CLUSTERS];


__device__ double euclideanDistance(uchar4 vec1, double3 vec2){
	return pow((double)(vec1.x - vec2.x), 2) + pow((double)(vec1.y - vec2.y), 2) + pow((double)(vec1.z - vec2.z),2);
}

__global__ void kMeans(uchar4* src, int nc, int size){
	int index = blockIdx.x * blockDim.x + threadIdx.x;
	int offset = gridDim.x * blockDim.x;

	for (int i = index; i &amp;lt; size; i += offset){

		double min = euclideanDistance(src[i], centersDevice[0]);
		int clusterNumber = 0;
		for (int k = 1; k &amp;lt; nc; k++){
			double curDst = euclideanDistance(src[i], centersDevice[k]);
			if (curDst &amp;lt; min){
				min = curDst;
				clusterNumber = k;
			}
		}

		if (src[i].w != clusterNumber){
			src[i].w = clusterNumber + MAX_CLUSTERS;
		}
		else {
			src[i].w = clusterNumber;
		}
	}
}


char* getline() {
	char * line = (char*)malloc(SIZE_FILE_NAME);
	char * linep = line;
	int c;

	for (;;) {
		c = fgetc(stdin);
		if (c == EOF)
			break;
		if (c == &#39;\n&#39;)
			break;
		*line++ = c;
	}
	*line++ = &#39;\0&#39;;
	return linep;
}

int main()
{
	cudaEvent_t start, stop;
	cudaEventCreate(&amp;amp;start);
	cudaEventCreate(&amp;amp;stop);


	char* inputFileName = getline();
	char* outputFileName = getline();

	int nc;
	scanf(&amp;quot;%d&amp;quot;, &amp;amp;nc);
	int2 clusters[MAX_CLUSTERS];
	

	double3 centers[MAX_CLUSTERS];

	int w, h;
	FILE *in = fopen(inputFileName, &amp;quot;rb&amp;quot;);
	fread(&amp;amp;w, sizeof(int), 1, in);
	fread(&amp;amp;h, sizeof(int), 1, in);
	int srcMem = sizeof(uchar4)* w * h;
	uchar4 *src = (uchar4*)malloc(srcMem);
	fread(src, sizeof(uchar4), w * h, in);


	cudaEventRecord(start);

	
	for (int i = 0; i &amp;lt; nc; i++){
		centers[i].x = 255/nc * i;
		centers[i].y = 255/nc * i;
		centers[i].z = 255/nc * i;
	}
	

	uchar4 *srcDevice;
	cudaMalloc((void**)&amp;amp;srcDevice, srcMem);

	int iterations = 0;
	int clusterNumber;

	bool end = false;

	while (!end){
		end = true;

		iterations++;

		cudaMemcpy(srcDevice, src, srcMem, cudaMemcpyHostToDevice);
		cudaMemcpyToSymbol(centersDevice, centers, MAX_CLUSTERS * sizeof(double3));
		kMeans &amp;lt;&amp;lt;&amp;lt; min((int)ceil((double)w*h / (double)BLOCK_SIZE), MAX_GRID_SIZE), BLOCK_SIZE &amp;gt;&amp;gt; &amp;gt; (srcDevice, nc, w*h);
		cudaMemcpy(src, srcDevice, srcMem, cudaMemcpyDeviceToHost);
		cudaMemcpyFromSymbol(centers, centersDevice, sizeof(double3)* MAX_CLUSTERS);

		double sumR[MAX_CLUSTERS];
		double sumG[MAX_CLUSTERS];
		double sumB[MAX_CLUSTERS];
		double size[MAX_CLUSTERS];
		for (int i = 0; i &amp;lt; nc; i++){
			sumR[i] = 0;
			sumG[i] = 0;
			sumB[i] = 0;
			size[i] = 0;
		}

		for (int i = 0; i &amp;lt; h; i++){
			for (int j = 0; j &amp;lt; w; j++){
				if (src[i*w + j].w &amp;gt;= MAX_CLUSTERS){
					end = false;
					src[i*w + j].w -= MAX_CLUSTERS;
				}
				clusterNumber = src[i*w + j].w;
				size[clusterNumber] += 1;
				sumR[clusterNumber] += src[i*w + j].x;
				sumG[clusterNumber] += src[i*w + j].y;
				sumB[clusterNumber] += src[i*w + j].z;
			}


			for (int i = 0; i &amp;lt; nc; i++){
				centers[i].x = sumR[i] / size[i];
				centers[i].y = sumG[i] / size[i];
				centers[i].z = sumB[i] / size[i];
			}
		}

	}

	cudaEventRecord(stop);
	cudaEventSynchronize(stop);
	float milliseconds = 0;
	cudaEventElapsedTime(&amp;amp;milliseconds, start, stop);
	printf(&amp;quot;Time: %f ms\n&amp;quot;, milliseconds);
	printf(&amp;quot;Iterations: %d\n&amp;quot;, iterations);

	for (int i = 0; i &amp;lt; h; i++){
		for (int j = 0; j &amp;lt; w; j++){
			src[i*w + j].x = ceil(centers[src[i*w + j].w].x);
			src[i*w + j].y = ceil(centers[src[i*w + j].w].y);
			src[i*w + j].z = ceil(centers[src[i*w + j].w].z);
		}
	}


	FILE *out = fopen(outputFileName, &amp;quot;wb&amp;quot;);
	fwrite(&amp;amp;w, sizeof(int), 1, out);
	fwrite(&amp;amp;h, sizeof(int), 1, out);
	fwrite(src, sizeof(uchar4), h*w, out);
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>